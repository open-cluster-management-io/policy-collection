apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-falco
  annotations:
    policy.open-cluster-management.io/standards: NIST SP 800-53
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-5 Security Alerts, Advisories, and Directives
    integrityshield.io/message: 
    integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEdCQUFCQ0FBd0ZpRUVJbnBMR1hSY1QwV2tWTzgyVSt5TUt1c3JLdUlGQW1BSVhHOFNISE5vYVdWc1pFQnkKWldSb1lYUXVZMjl0QUFvSkVGUHNqQ3JyS3lyaTZmRU1BSnpLQXF1VUM5Z00walpjUUlHVGhXcUZHN21OTU90SApnclQ5Q1R0MDB3WmFMcWVSd2pObWYwMFJ6L0oraXBaR2VFNmNkejNuRXFpdWx2dUJKbnBxNVNHR2hvOGpoQURJCmhUaWI3OEVrZHRrVVNGanc2T3FIWDNha3pPYlBrVmYxaGlVMUYrTDltWDlqLzk0Smx4Njk5WjMxZXNQS2gzMnkKLzAvUFUxTm9FaVRwb0h3R2x4aGVyU0pYaTJnSkY3OGRlL3hhTmloZ200eXZkVy84K3hCVEE0WnZtN2pSbGRJOQpseDlRWWFwUUxRVU51eFVsNzlmZkxadm1ud3JBaDZBRXFtbVFmZHp3NU9TYmFYeC9PMVM0aFh0bW9DNWNIQlI1CllOOEN1WXk3VlJJNWhraUs0eDVZLzljVnlvMHcvMkM1K1ZIU29rbVZDclJGZnN5WWdxRnpUTCt6cnN6QmtlZnEKTnBKRHRRTkQ0TWhvVjkzUVRTUlFxVFR3ZnpzWGRyQzZTbko4STBpQUNEc3llOWZaTVE5WDZKOW4vUnVEL08vQgpWMEdGVjZsL1RvRGtTamxHRXY1dnJhUWRtZzJ6SlNaTGNib003ZXVrZkxWUjA5SEhwMGxZbXkvRkdPZmZPRFJZCmJrclZOblc1SFR2OERjRmtNWmR1NlQzTjZMMy9qZEg3bGc9PQo9eWRwSQotLS0tLUVORCBQR1AgU0lHTkFUVVJFLS0tLS0K
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-falco-ns
        spec:
          remediationAction: enforce # the policy-template spec.remediationAction is overridden by the preceding parameter value for spec.remediationAction.
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["*"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: falco-operator
                spec: {}
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-falco-csv
        spec:
          remediationAction: enforce # the policy-template spec.remediationAction is overridden by the preceding parameter value for spec.remediationAction.
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["*"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: operators.coreos.com/v1alpha1
                kind: ClusterServiceVersion
                metadata:
                  name: falco-operator.v1.2.0
                  namespace: falco-operator
                  annotations:
                    capabilities: "Basic Install"
                    categories: "Security"
                    certified: "true"
                    description: |-
                      The Falco Project is an open source runtime security tool.
                    containerImage: registry.connect.redhat.com/sysdig/falco-operator
                    support: Sysdig, Inc.
                    repository: https://github.com/sysdiglabs/falco-operator/
                    alm-examples: |-
                      [
                        {
                          "apiVersion": "falco.org/v1",
                          "kind": "Falco",
                          "metadata": {
                            "name": "example-falco"
                          },
                          "spec": {}
                        }
                      ]
                spec:
                  apiservicedefinitions: {}
                  maturity: stable
                  customresourcedefinitions:
                    owned:
                      - kind: Falco
                        displayName: Falco daemonSet
                        description: Represents a Falco Agent running on each node of your cluster.
                        name: falcos.falco.org
                        version: v1
                  description: |-
                    [Falco](https://falco.org) is a behavioral activity monitor designed to
                    detect anomalous activity in your applications. You can use Falco to
                    monitor run-time security of your Kubernetes applications and internal
                    components.

                    This operator installs Falco in all nodes in your cluster via a DaemonSet.

                    ## Settings

                    This operator, uses the same options than the Helm Chart please take a look
                    to all the options in the following table:

                    | Parameter                                       | Description                                                                                                                                                                                                | Default                                                                                                                                   |
                    | ---                                             | ---                                                                                                                                                                                                        | ---                                                                                                                                       |
                    | `image.registry`                                | The image registry to pull from                                                                                                                                                                            | `docker.io`                                                                                                                               |
                    | `image.repository`                              | The image repository to pull from                                                                                                                                                                          | `falcosecurity/falco`                                                                                                                     |
                    | `image.tag`                                     | The image tag to pull                                                                                                                                                                                      | `0.24.0`                                                                                                                                  |
                    | `image.pullPolicy`                              | The image pull policy                                                                                                                                                                                      | `IfNotPresent`                                                                                                                            |
                    | `containerd.enabled`                            | Enable ContainerD support                                                                                                                                                                                  | `true`                                                                                                                                    |
                    | `containerd.socket`                             | The path of the ContainerD socket                                                                                                                                                                          | `/run/containerd/containerd.sock`                                                                                                         |
                    | `docker.enabled`                                | Enable Docker support                                                                                                                                                                                      | `true`                                                                                                                                    |
                    | `docker.socket`                                 | The path of the Docker daemon socket                                                                                                                                                                       | `/var/run/docker.sock`                                                                                                                    |
                    | `resources.requests.cpu`                        | CPU requested for being run in a node                                                                                                                                                                      | `100m`                                                                                                                                    |
                    | `resources.requests.memory`                     | Memory requested for being run in a node                                                                                                                                                                   | `512Mi`                                                                                                                                   |
                    | `resources.limits.cpu`                          | CPU limit                                                                                                                                                                                                  | `200m`                                                                                                                                    |
                    | `resources.limits.memory`                       | Memory limit                                                                                                                                                                                               | `1024Mi`                                                                                                                                  |
                    | `extraArgs`                                     | Specify additional container args                                                                                                                                                                          | `[]`                                                                                                                                      |
                    | `rbac.create`                                   | If true, create & use RBAC resources                                                                                                                                                                       | `true`                                                                                                                                    |
                    | `serviceAccount.create`                         | Create serviceAccount                                                                                                                                                                                      | `true`                                                                                                                                    |
                    | `serviceAccount.name`                           | Use this value as serviceAccountName                                                                                                                                                                       | ` `                                                                                                                                       |
                    | `fakeEventGenerator.enabled`                    | Run falco-event-generator for sample events                                                                                                                                                                | `false`                                                                                                                                   |
                    | `fakeEventGenerator.replicas`                   | How many replicas of falco-event-generator to run                                                                                                                                                          | `1`                                                                                                                                       |
                    | `daemonset.updateStrategy.type`                 | The updateStrategy for updating the daemonset                                                                                                                                                              | `RollingUpdate`                                                                                                                           |
                    | `daemonset.env`                                 | Extra environment variables passed to daemonset pods                                                                                                                                                       | `{}`                                                                                                                                      |
                    | `daemonset.podAnnotations`                      | Extra pod annotations to be added to pods created by the daemonset                                                                                                                                         | `{}`                                                                                                                                      |
                    | `podSecurityPolicy.create`                      | If true, create & use podSecurityPolicy                                                                                                                                                                    | `false`                                                                                                                                   |
                    | `proxy.httpProxy`                               | Set the Proxy server if is behind a firewall                                                                                                                                                               | ` `                                                                                                                                       |
                    | `proxy.httpsProxy`                              | Set the Proxy server if is behind a firewall                                                                                                                                                               | ` `                                                                                                                                       |
                    | `proxy.noProxy`                                 | Set the Proxy server if is behind a firewall                                                                                                                                                               | ` `                                                                                                                                       |
                    | `timezone`                                      | Set the daemonset's timezone                                                                                                                                                                               | ` `                                                                                                                                       |
                    | `priorityClassName`                             | Set the daemonset's priorityClassName                                                                                                                                                                      | ` `                                                                                                                                       |
                    | `ebpf.enabled`                                  | Enable eBPF support for Falco instead of `falco-probe` kernel module                                                                                                                                       | `false`                                                                                                                                   |
                    | `ebpf.settings.hostNetwork`                     | Needed to enable eBPF JIT at runtime for performance reasons                                                                                                                                               | `true`                                                                                                                                    |
                    | `auditLog.enabled`                              | Enable K8s audit log support for Falco                                                                                                                                                                     | `false`                                                                                                                                   |
                    | `auditLog.dynamicBackend.enabled`               | Deploy the Audit Sink where Falco listens for K8s audit log events                                                                                                                                         | `false`                                                                                                                                   |
                    | `auditLog.dynamicBackend.url`                   | Define if Audit Sink client config should point to a fixed [url](https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#url) (useful for development) instead of the default webserver service. | ``                                                                                                                                        |
                    | `falco.rulesFile`                               | The location of the rules files                                                                                                                                                                            | `[/etc/falco/falco_rules.yaml, /etc/falco/falco_rules.local.yaml, /etc/falco/rules.available/application_rules.yaml, /etc/falco/rules.d]` |
                    | `falco.timeFormatISO8601`                       | Display times using ISO 8601 instead of local time zone                                                                                                                                                    | `false`                                                                                                                                   |
                    | `falco.jsonOutput`                              | Output events in json or text                                                                                                                                                                              | `false`                                                                                                                                   |
                    | `falco.jsonIncludeOutputProperty`               | Include output property in json output                                                                                                                                                                     | `true`                                                                                                                                    |
                    | `falco.logStderr`                               | Send Falco debugging information logs to stderr                                                                                                                                                            | `true`                                                                                                                                    |
                    | `falco.logSyslog`                               | Send Falco debugging information logs to syslog                                                                                                                                                            | `true`                                                                                                                                    |
                    | `falco.logLevel`                                | The minimum level of Falco debugging information to include in logs                                                                                                                                        | `info`                                                                                                                                    |
                    | `falco.priority`                                | The minimum rule priority level to load and run                                                                                                                                                            | `debug`                                                                                                                                   |
                    | `falco.bufferedOutputs`                         | Use buffered outputs to channels                                                                                                                                                                           | `false`                                                                                                                                   |
                    | `falco.syscallEventDrops.actions`               | Actions to be taken when system calls were dropped from the circular buffer                                                                                                                                | `[log, alert]`                                                                                                                            |
                    | `falco.syscallEventDrops.rate`                  | Rate at which log/alert messages are emitted                                                                                                                                                               | `.03333`                                                                                                                                  |
                    | `falco.syscallEventDrops.maxBurst`              | Max burst of messages emitted                                                                                                                                                                              | `10`                                                                                                                                      |
                    | `falco.outputs.rate`                            | Number of tokens gained per second                                                                                                                                                                         | `1`                                                                                                                                       |
                    | `falco.outputs.maxBurst`                        | Maximum number of tokens outstanding                                                                                                                                                                       | `1000`                                                                                                                                    |
                    | `falco.syslogOutput.enabled`                    | Enable syslog output for security notifications                                                                                                                                                            | `true`                                                                                                                                    |
                    | `falco.fileOutput.enabled`                      | Enable file output for security notifications                                                                                                                                                              | `false`                                                                                                                                   |
                    | `falco.fileOutput.keepAlive`                    | Open file once or every time a new notification arrives                                                                                                                                                    | `false`                                                                                                                                   |
                    | `falco.fileOutput.filename`                     | The filename for logging notifications                                                                                                                                                                     | `./events.txt`                                                                                                                            |
                    | `falco.stdoutOutput.enabled`                    | Enable stdout output for security notifications                                                                                                                                                            | `true`                                                                                                                                    |
                    | `falco.webserver.enabled`                       | Enable Falco embedded webserver to accept K8s audit events                                                                                                                                                 | `true`                                                                                                                                    |
                    | `falco.webserver.listenPort`                    | Port where Falco embedded webserver listen to connections                                                                                                                                                  | `8765`                                                                                                                                    |
                    | `falco.webserver.k8sAuditEndpoint`              | Endpoint where Falco embedded webserver accepts K8s audit events                                                                                                                                           | `/k8s-audit`                                                                                                                              |
                    | `falco.programOutput.enabled`                   | Enable program output for security notifications                                                                                                                                                           | `false`                                                                                                                                   |
                    | `falco.programOutput.keepAlive`                 | Start the program once or re-spawn when a notification arrives                                                                                                                                             | `false`                                                                                                                                   |
                    | `falco.programOutput.program`                   | Command to execute for program output                                                                                                                                                                      | `mail -s "Falco Notification" someone@example.com`                                                                                        |
                    | `falco.httpOutput.enabled`                      | Enable http output for security notifications                                                                                                                                                              | `false`                                                                                                                                   |
                    | `falco.httpOutput.url`                          | Url to notify using the http output when a notification arrives                                                                                                                                            | `http://some.url`                                                                                                                         |
                    | `falco.grpc.enabled`                            | Enable the Falco gRPC server                                                                                                                                                                               | `false`
                    | `falco.grpc.listenPort`                         | Port where Falco gRPC server listen to connections                                                                                                                                                         | `5060`
                    | `falco.grpc.threadiness`                        | Number of threads (and context) the gRPC server will use                                                                                                                                                   | `8`
                    | `falco.grpc.privateKey`                         | Key file path for the Falco gRPC server                                                                                                                                                                    | `/etc/falco/certs/server.key`
                    | `falco.grpc.certChain`                          | Cert file path for the Falco gRPC server                                                                                                                                                                   | `/etc/falco/certs/server.crt`
                    | `falco.grpc.rootCerts`                          | CA root file path for the Falco gRPC server                                                                                                                                                                | `/etc/falco/certs/ca.crt`
                    | `falco.grpcOutput.enabled`                      | Enable the gRPC output and events will be kept in memory until you read them with a gRPC client.                                                                                                           | `false`                                                                                                                                   |
                    | `customRules`                                   | Third party rules enabled for Falco                                                                                                                                                                        | `{}`                                                                                                                                      |
                    | `integrations.gcscc.enabled`                    | Enable Google Cloud Security Command Center integration                                                                                                                                                    | `false`                                                                                                                                   |
                    | `integrations.gcscc.webhookUrl`                 | The URL where sysdig-gcscc-connector webhook is listening                                                                                                                                                  | `http://sysdig-gcscc-connector.default.svc.cluster.local:8080/events`                                                                     |
                    | `integrations.gcscc.webhookAuthenticationToken` | Token used for authentication and webhook                                                                                                                                                                  | `b27511f86e911f20b9e0f9c8104b4ec4`                                                                                                        |
                    | `integrations.natsOutput.enabled`               | Enable NATS Output integration                                                                                                                                                                             | `false`                                                                                                                                   |
                    | `integrations.natsOutput.natsUrl`               | The NATS' URL where Falco is going to publish security alerts                                                                                                                                              | `nats://nats.nats-io.svc.cluster.local:4222`                                                                                              |
                    | `integrations.pubsubOutput.credentialsData`     | Contents retrieved from `cat $HOME/.config/gcloud/legacy_credentials/<email>/adc.json                                                                                                                      | ` `                                                                                                                                       |
                    | `integrations.pubsubOutput.enabled`             | Enable GCloud PubSub Output Integration                                                                                                                                                                    | `false`                                                                                                                                   |
                    | `integrations.pubsubOutput.projectID`           | GCloud Project ID where the Pub/Sub will be created                                                                                                                                                        | ` `                                                                                                                                       |
                    | `integrations.snsOutput.enabled`                | Enable Amazon SNS Output integration                                                                                                                                                                       | `false`                                                                                                                                   |
                    | `integrations.snsOutput.topic`                  | The SNS topic where Falco is going to publish security alerts                                                                                                                                              | ` `                                                                                                                                       |
                    | `integrations.snsOutput.aws_access_key_id`      | The AWS Access Key Id credentials for access to SNS n                                                                                                                                                      | ` `                                                                                                                                       |
                    | `integrations.snsOutput.aws_secret_access_key`  | The AWS Secret Access Key credential to access to SNS                                                                                                                                                      | ` `                                                                                                                                       |
                    | `integrations.snsOutput.aws_default_region`     | The AWS region where SNS is deployed                                                                                                                                                                       | ` `                                                                                                                                       |
                    | `nodeSelector`                                  | The node selection constraint                                                                                                                                                                              | `{}`                                                                                                                                      |
                    | `affinity`                                      | The affinity constraint                                                                                                                                                                                    | `{}`                                                                                                                                      |
                    | `tolerations`                                   | The tolerations for scheduling                                                                                                                                                                             | `node-role.kubernetes.io/master:NoSchedule`                                                                                               |

                    For example, if you want to deploy a DaemonSet with eBPF enabled:

                    ```yaml
                    apiVersion: falco.org/v1
                    kind: Falco
                    metadata:
                      name: falco-with-ebpf
                    spec:
                      ebpf:
                        enabled: true
                    ```
                  displayName: Falco Operator
                  keywords:
                    - security
                    - alerting
                    - troubleshooting
                    - run-time
                  maintainers:
                    - name: Néstor Salceda
                      email: nestor.salceda@sysdig.com
                  provider:
                    name: Sysdig
                  links:
                    - name: Falco
                      url: https://falco.org
                    - name: Documentation
                      url: https://falco.org/docs/
                    - name: Helm Chart
                      url: https://github.com/falcosecurity/charts/tree/master/falco
                    - name: Falco Operator
                      url: https://github.com/sysdiglabs/falco-operator
                    - name: Configuration Options
                      url: https://github.com/falcosecurity/charts/tree/master/falco#configuration
                  icon:
                    - base64data: 
                      mediatype: image/png
                  install:
                    spec:
                      clusterPermissions:
                        - rules:
                            - apiGroups:
                                - "*"
                              resources:
                                - "*"
                              verbs:
                                - "*"
                          serviceAccountName: falco-operator
                      deployments:
                        - name: falco-operator
                          spec:
                            replicas: 1
                            selector:
                              matchLabels:
                                name: falco-operator
                            strategy: {}
                            template:
                              metadata:
                                labels:
                                  name: falco-operator
                              spec:
                                containers:
                                  - env:
                                      - name: WATCH_NAMESPACE
                                        valueFrom:
                                          fieldRef:
                                            fieldPath: "metadata.annotations['olm.targetNamespaces']"
                                      - name: POD_NAME
                                        valueFrom:
                                          fieldRef:
                                            fieldPath: metadata.name
                                      - name: OPERATOR_NAME
                                        value: falco-operator
                                    image: registry.connect.redhat.com/sysdig/falco-operator:1.2.0
                                    imagePullPolicy: Always
                                    name: falco-operator
                                    resources: {}
                                serviceAccountName: falco-operator
                    strategy: deployment
                  version: 1.2.0
                  installModes:
                    - type: OwnNamespace
                      supported: true
                    - type: SingleNamespace
                      supported: true
                    - type: MultiNamespace
                      supported: false
                    - type: AllNamespaces
                      supported: false
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-falco-operatorgroup
        spec:
          remediationAction: enforce # the policy-template spec.remediationAction is overridden by the preceding parameter value for spec.remediationAction.
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["*"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: operators.coreos.com/v1
                kind: OperatorGroup
                metadata:
                  name: falco-operatorgroup
                  namespace: falco-operator
                spec:
                  targetNamespaces:
                    - falco-operator
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-falco-subscription
        spec:
          remediationAction: enforce # the policy-template spec.remediationAction is overridden by the preceding parameter value for spec.remediationAction.
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["*"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: operators.coreos.com/v1alpha1
                kind: Subscription
                metadata:
                  name: falco-operator
                  namespace: falco-operator
                spec:
                  channel: stable
                  installPlanApproval: Automatic
                  name: falco-certified
                  source: certified-operators
                  sourceNamespace: openshift-marketplace
                  startingCSV: falco-operator.v1.2.0
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-falco-installation
        spec:
          remediationAction: enforce # the policy-template spec.remediationAction is overridden by the preceding parameter value for spec.remediationAction.
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["*"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: falco.org/v1
                kind: Falco
                metadata:
                  name: falco-enforcement
                  namespace: falco-operator
                spec: {}
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-falco
  annotations: {integrityshield.io/message: , integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEdCQUFCQ0FBd0ZpRUVJbnBMR1hSY1QwV2tWTzgyVSt5TUt1c3JLdUlGQW1BSVhHOFNISE5vYVdWc1pFQnkKWldSb1lYUXVZMjl0QUFvSkVGUHNqQ3JyS3lyaTZmRU1BSnpLQXF1VUM5Z00walpjUUlHVGhXcUZHN21OTU90SApnclQ5Q1R0MDB3WmFMcWVSd2pObWYwMFJ6L0oraXBaR2VFNmNkejNuRXFpdWx2dUJKbnBxNVNHR2hvOGpoQURJCmhUaWI3OEVrZHRrVVNGanc2T3FIWDNha3pPYlBrVmYxaGlVMUYrTDltWDlqLzk0Smx4Njk5WjMxZXNQS2gzMnkKLzAvUFUxTm9FaVRwb0h3R2x4aGVyU0pYaTJnSkY3OGRlL3hhTmloZ200eXZkVy84K3hCVEE0WnZtN2pSbGRJOQpseDlRWWFwUUxRVU51eFVsNzlmZkxadm1ud3JBaDZBRXFtbVFmZHp3NU9TYmFYeC9PMVM0aFh0bW9DNWNIQlI1CllOOEN1WXk3VlJJNWhraUs0eDVZLzljVnlvMHcvMkM1K1ZIU29rbVZDclJGZnN5WWdxRnpUTCt6cnN6QmtlZnEKTnBKRHRRTkQ0TWhvVjkzUVRTUlFxVFR3ZnpzWGRyQzZTbko4STBpQUNEc3llOWZaTVE5WDZKOW4vUnVEL08vQgpWMEdGVjZsL1RvRGtTamxHRXY1dnJhUWRtZzJ6SlNaTGNib003ZXVrZkxWUjA5SEhwMGxZbXkvRkdPZmZPRFJZCmJrclZOblc1SFR2OERjRmtNWmR1NlQzTjZMMy9qZEg3bGc9PQo9eWRwSQotLS0tLUVORCBQR1AgU0lHTkFUVVJFLS0tLS0K}
placementRef:
  name: placement-policy-falco
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-falco
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-falco
  annotations: {integrityshield.io/message: , integrityshield.io/signature: LS0tLS1CRUdJTiBQR1AgU0lHTkFUVVJFLS0tLS0KCmlRSEdCQUFCQ0FBd0ZpRUVJbnBMR1hSY1QwV2tWTzgyVSt5TUt1c3JLdUlGQW1BSVhHOFNISE5vYVdWc1pFQnkKWldSb1lYUXVZMjl0QUFvSkVGUHNqQ3JyS3lyaTZmRU1BSnpLQXF1VUM5Z00walpjUUlHVGhXcUZHN21OTU90SApnclQ5Q1R0MDB3WmFMcWVSd2pObWYwMFJ6L0oraXBaR2VFNmNkejNuRXFpdWx2dUJKbnBxNVNHR2hvOGpoQURJCmhUaWI3OEVrZHRrVVNGanc2T3FIWDNha3pPYlBrVmYxaGlVMUYrTDltWDlqLzk0Smx4Njk5WjMxZXNQS2gzMnkKLzAvUFUxTm9FaVRwb0h3R2x4aGVyU0pYaTJnSkY3OGRlL3hhTmloZ200eXZkVy84K3hCVEE0WnZtN2pSbGRJOQpseDlRWWFwUUxRVU51eFVsNzlmZkxadm1ud3JBaDZBRXFtbVFmZHp3NU9TYmFYeC9PMVM0aFh0bW9DNWNIQlI1CllOOEN1WXk3VlJJNWhraUs0eDVZLzljVnlvMHcvMkM1K1ZIU29rbVZDclJGZnN5WWdxRnpUTCt6cnN6QmtlZnEKTnBKRHRRTkQ0TWhvVjkzUVRTUlFxVFR3ZnpzWGRyQzZTbko4STBpQUNEc3llOWZaTVE5WDZKOW4vUnVEL08vQgpWMEdGVjZsL1RvRGtTamxHRXY1dnJhUWRtZzJ6SlNaTGNib003ZXVrZkxWUjA5SEhwMGxZbXkvRkdPZmZPRFJZCmJrclZOblc1SFR2OERjRmtNWmR1NlQzTjZMMy9qZEg3bGc9PQo9eWRwSQotLS0tLUVORCBQR1AgU0lHTkFUVVJFLS0tLS0K}
spec:
  clusterConditions:
    - status: "True"
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
