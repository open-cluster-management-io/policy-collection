apiVersion: v1
kind: Namespace
metadata:
  labels:
    openshift.io/cluster-monitoring: "true"
  name: local-quay
---
apiVersion: operators.coreos.com/v1
kind: OperatorGroup
metadata:
  name: local-quay
  namespace: local-quay
spec:
  targetNamespaces:
  - local-quay
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  labels:
    operators.coreos.com/quay-operator.local-quay: ""
  name: quay-operator
  namespace: local-quay
spec:
  channel: stable-3.6
  installPlanApproval: Automatic
  name: quay-operator
  source: redhat-operators
  sourceNamespace: openshift-marketplace
---
apiVersion: v1
data:
  config.yaml: RkVBVFVSRV9VU0VSX0lOSVRJQUxJWkU6IHRydWUKQlJPV1NFUl9BUElfQ0FMTFNfWEhSX09OTFk6IGZhbHNlClNVUEVSX1VTRVJTOgotIHF1YXlhZG1pbgpGRUFUVVJFX1VTRVJfQ1JFQVRJT046IGZhbHNlCg==
kind: Secret
metadata:
  name: init-config-bundle-secret
  namespace: local-quay
type: Opaque
---
apiVersion: quay.redhat.com/v1
kind: QuayRegistry
metadata:
  name: registry
  namespace: local-quay
spec:
  configBundleSecret: init-config-bundle-secret
  components:
    - kind: objectstorage
      managed: true
    - managed: true
      kind: tls
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: create-admin-user
  namespace: local-quay
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: create-admin-user
  namespace: local-quay
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - create
  - patch
  - update
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: create-admin-user
  namespace: local-quay
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: create-admin-user
subjects:
- kind: ServiceAccount
  name: create-admin-user
  namespace: local-quay
---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-admin-user
  namespace: local-quay
spec:
  template:
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          #!/usr/bin/env bash

          # Wait for quay to be ready
          attempt_counter=0
          max_attempts=20
          echo "Waiting for quay to be available..."
          until $(curl --output /dev/null --silent --head --fail http://registry-quay-app); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              echo "Made attempt $attempt_counter, waiting..."
              sleep 5
          done

          QUAYHOST=$(oc get route -n local-quay registry-quay -o jsonpath='{.spec.host}')
          if [ $? -ne 0 ]; then
            echo "Quay route does not exist yet, please wait and try again."
            exit 1
          fi
          RESULT=$(oc get secret -n local-quay quayadmin)
          if [ $? -eq 0 ]; then
            echo "Quay user configuration secret already exists: quayadmin in namespace local-quay"
            exit 1
          fi

          ADMINPASS=`head -c 8 /dev/urandom | base64 | sed 's/=//'`
          
          RESULT=$(curl -X POST -k -s https://$QUAYHOST/api/v1/user/initialize --header 'Content-Type: application/json' --data "{ \"username\": \"quayadmin\", \"password\":\"${ADMINPASS}\", \"email\": \"quayadmin@example.com\", \"access_token\": true}")
          echo "$RESULT" | grep -q "non-empty database"
          if [ $? -eq 0 ]; then
            echo "Quay user configuration failed, the database has been initialized."
            exit 1
          else
            cat <<EOF | kubectl create -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: quayadmin
            namespace: local-quay
          type: Opaque
          data:
            password: $(echo ${ADMINPASS} | base64)
          EOF
            echo "Quay password successfully set for user quayadmin and stored in secret local-quay/quayadmin."
          fi
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        imagePullPolicy: Always
        name: create-admin-user
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: create-admin-user
      serviceAccountName: create-admin-user
      terminationGracePeriodSeconds: 30
