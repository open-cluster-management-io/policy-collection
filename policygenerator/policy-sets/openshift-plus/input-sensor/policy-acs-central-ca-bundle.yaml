apiVersion: v1
kind: Namespace
metadata:
  name: stackrox
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: create-cluster-init
  namespace: stackrox
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "1"
  name: create-cluster-init
  namespace: stackrox
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - create
  - patch
  - update
- apiGroups:
  - platform.stackrox.io
  resources:
  - securedclusters
  verbs:
  - get
  - list
  - patch
  - update
- apiGroups:
  - route.openshift.io
  resources:
  - routes
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: create-cluster-init
  namespace: stackrox
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: create-cluster-init
subjects:
- kind: ServiceAccount
  name: create-cluster-init
  namespace: stackrox
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "2"
  name: create-cluster-init-bundle
  namespace: stackrox
spec:
  template:
    metadata:
      annotations:
        argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          #!/usr/bin/env bash
          if kubectl get secret/sensor-tls &> /dev/null; then
            echo "cluster-init bundle has already been configured, doing nothing"
            exit 0
          else

            # Wait for central to be ready
            attempt_counter=0
            max_attempts=20
            echo "Waiting for central to be available..."
            until $(curl -k --output /dev/null --silent --head --fail https://central); do
                if [ ${attempt_counter} -eq ${max_attempts} ];then
                  echo "Max attempts reached"
                  exit 1
                fi

                printf '.'
                attempt_counter=$(($attempt_counter+1))
                echo "Made attempt $attempt_counter, waiting..."
                sleep 5
            done

            echo "Configuring cluster-init bundle"
            export DATA={\"name\":\"local-cluster\"}
            curl -k -o /tmp/bundle.json -X POST -u "admin:$PASSWORD" -H "Content-Type: application/json" --data $DATA https://central/v1/cluster-init/init-bundles

            echo "Bundle received"
            cat /tmp/bundle.json

            if [[ "$OSTYPE" == "linux-gnu"* ]]; then
                BASE='base64 -w 0'
            elif [[ "$OSTYPE" == "darwin"* ]]; then
                BASE='base64'
            fi

            echo "Applying bundle"
            # No jq in container, python to the rescue
            cat /tmp/bundle.json | python3 -c "import sys, json; print(json.load(sys.stdin)['kubectlBundle'])" | ${BASE} -d | oc apply -f -
            # Touch SecuredCluster to force operator to reconcile
            oc label SecuredCluster local-cluster cluster-init-job-status=created
            ACS_HOST="$(oc get route central -o custom-columns=HOST:.spec.host --no-headers):443"
            oc patch secret sensor-tls --type='json' -p="[{\"op\" : \"add\", \"path\" : \"/data/acs-host\", \"value\" : \"$(echo $ACS_HOST | ${BASE})\"}]"

            echo "ACS Cluster init bundle generated and applied"
          fi
        env:
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: central-htpasswd
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
        imagePullPolicy: Always
        name: create-cluster-init-bundle
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: create-cluster-init
      serviceAccountName: create-cluster-init
      terminationGracePeriodSeconds: 30
---
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: rhacs-operator
  namespace: openshift-operators
spec:
  channel: latest
  installPlanApproval: Automatic
  name: rhacs-operator
  source: redhat-operators
  sourceNamespace: openshift-marketplace
---
apiVersion: platform.stackrox.io/v1alpha1
kind: SecuredCluster
metadata:
  name: stackrox-secured-cluster-services
  namespace: stackrox
spec:
  clusterName: |
    {{ fromSecret "open-cluster-management-agent" "hub-kubeconfig-secret" "cluster-name" | base64dec }}
  auditLogs:
    collection: Auto
  centralEndpoint: |
    {{ fromSecret "stackrox" "sensor-tls" "acs-host" | base64dec }}
  admissionControl:
    listenOnCreates: false
    listenOnEvents: true
    listenOnUpdates: false
  perNode:
    collector:
      collection: KernelModule
      imageFlavor: Regular
    taintToleration: TolerateTaints
---
apiVersion: v1
data:
  admission-control-cert.pem: '{{ fromSecret "stackrox" "admission-control-tls" "admission-control-cert.pem" }}'
  admission-control-key.pem: '{{ fromSecret "stackrox" "admission-control-tls" "admission-control-key.pem" }}'
  ca.pem: '{{ fromSecret "stackrox" "admission-control-tls" "ca.pem" }}'
kind: Secret
metadata:
  name: admission-control-tls
  namespace: policies
type: Opaque
---
apiVersion: v1
data:
  collector-cert.pem: '{{ fromSecret "stackrox" "collector-tls" "collector-cert.pem" }}'
  collector-key.pem: '{{ fromSecret "stackrox" "collector-tls" "collector-key.pem" }}'
  ca.pem: '{{ fromSecret "stackrox" "collector-tls" "ca.pem" }}'
kind: Secret
metadata:
  name: collector-tls
  namespace: policies
type: Opaque
---
apiVersion: v1
data:
  sensor-cert.pem: '{{ fromSecret "stackrox" "sensor-tls" "sensor-cert.pem" }}'
  sensor-key.pem: '{{ fromSecret "stackrox" "sensor-tls" "sensor-key.pem" }}'
  ca.pem: '{{ fromSecret "stackrox" "sensor-tls" "ca.pem" }}'
  acs-host: '{{ fromSecret "stackrox" "sensor-tls" "acs-host" }}'
kind: Secret
metadata:
  name: sensor-tls
  namespace: policies
type: Opaque
