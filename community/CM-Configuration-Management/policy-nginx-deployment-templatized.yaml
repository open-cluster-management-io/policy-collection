#This sample policy demonstrates configuring the nginx pod with the image version customized to the target cluster using  managedcluster-templates
# Image version to configure is  dynamically determined based on the openshift version of the target cluster. 

#NOTES
#All cluster labels are available on the managed cluster env  as clusterclaim resources. 
#fromClusterClaim() can be used to retrive the values of  DEFAULT LABELS like id.openshift.io, version.openshift.io etc are available on all managed clusters.

#In the below policy, 
# a configmap is created with the cluster specific info like id, version retrieved through fromClusterClaim func
# later in the policy the same configmap is referenced using fromConfigMap func to get ocp-version.

apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-nginx-deployment-templatized
  annotations:
    policy.open-cluster-management.io/standards: NIST 800-53
    policy.open-cluster-management.io/categories: CM Configuration Management
    policy.open-cluster-management.io/controls: CM-2 Baseline Configuration
spec:
  disabled: false
  remediationAction: inform
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-build-clusterinfo
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              clusterid: '{{ fromClusterClaim "id.openshift.io" }} '
              clustername: '{{ fromClusterClaim "name" }}'
              ocpversion: '{{ fromClusterClaim "version.openshift.io" }}'
              platform: '{{ fromClusterClaim "platform.open-cluster-management.io"
                }}'
              product: '{{ fromClusterClaim "product.open-cluster-management.io" }}'
            kind: ConfigMap
            metadata:
              name: clusterinfo
              namespace: default
        remediationAction: inform
        severity: low
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-nginx-deployment-templatized
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              labels:
                app: nginx
              name: nginx-deployment-templatized
              namespace: default
            spec:
              replicas: 3
              selector:
                matchLabels:
                  app: nginx
              template:
                metadata:
                  labels:
                    app: nginx
                spec:
                  containers:
                  #if ocpversion is 4.9 set nginx version to  1.21.4 else 1.20.2
                  - image: '{{- if eq (fromConfigMap "default" "clusterinfo" "ocpversion")
                      "4.9.13" -}} nginx:1.21.4 {{- else -}} nginx:1.20.2 {{- end -}}'
                    name: nginx
                    ports:
                    - containerPort: 80
        remediationAction: inform
        severity: low
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-nginx-deployment-templatized
placementRef:
  name: placement-policy-nginx-deployment-templatized
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
- name: policy-nginx-deployment-templatized
  kind: Policy
  apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-nginx-deployment-templatized
spec:
  clusterConditions:
  - status: "True"
    type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: environment, operator: In, values: ["dev"]}
