apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: acm-hub-pvc-backup-source
  namespace: open-cluster-management-backup
  annotations:
    policy.open-cluster-management.io/categories: CA Security Assessment and Authorization
    policy.open-cluster-management.io/controls: CA-2 Security Assessments, CA-7 Continuous Monitoring
    policy.open-cluster-management.io/standards: NIST SP 800-53
spec:
  disabled: false
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: acm-hub-pvc-backup-config
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: create-hub-replication-source
        spec:
          object-templates-raw: |
            {{- /* Specify the parameters  */ -}}
            {{- $api := "cluster.open-cluster-management.io/v1beta1" }}
            {{- $velero_api := "velero.io/v1" }}
            {{- $kind_schedule := "Schedule" }}
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (resources)"}}
            {{- $ns := "open-cluster-management-backup" }}   
            {{- $volsync_secret := "acm-hub-pvc-backup-restic-secret" }} 
            {{- $volsync_map := "hub-pvc-backup" }} 
            {{- $volsync_label := "cluster.open-cluster-management.io/backup-hub-pvc" }}
            {{- $pv_claim_cond := gt (len ( lookup "v1" "PersistentVolumeClaim" "" "" $volsync_label).items ) 0 }}
            {{- $volsync_backup_cond := gt (len ( lookup $velero_api $kind_schedule $ns "" $schedule_label).items ) 0  }}
            {{- $volsync_pvcs := "hub-pvc-backup-pvcs" }}
            {{- /* restic_secret_suffix is the suffix used for the secret when copied over to the PVC ns  */ -}}
            {{- $restic_secret_suffix := "acm-pvc-restic" }}

            {{- /* Create the volsync ReplicationSource and secret - if BackupSchedule exists ; delete ReplicationSource otherwise */ -}}
            {{ if $volsync_backup_cond }}

              {{- range $rs := (lookup "volsync.backube/v1alpha1" "ReplicationSource" "" "" $volsync_label).items }}
                {{- $pvc_rs := (lookup "v1" "PersistentVolumeClaim" $rs.metadata.namespace "" $volsync_label).items }}
                {{- /* If the PVC in the ReplicationSource ns no longer exists or doesn't have the volsync label, delete the ReplicationSource */ -}}
                {{ if eq (len $pvc_rs ) 0 }}  
                  - complianceType: mustnothave
                    objectDefinition:
                      kind: ReplicationSource
                      apiVersion: volsync.backube/v1alpha1
                      metadata:
                        name: {{ $rs.metadata.name }}
                        namespace: {{ $rs.metadata.namespace }}
                        labels:
                          {{ $volsync_label }}: acm
                  - complianceType: mustnothave
                    objectDefinition:
                      kind: ConfigMap
                      apiVersion: v1
                      metadata:
                        name: {{( (cat $volsync_map "-" $rs.metadata.name ) | replace " " "") }}
                        namespace: {{ $rs.metadata.namespace }} 
                {{- end }}
              {{- end }}

              {{- $volsync_pvcs_str := "" }}
              {{- range $pvc := (lookup "v1" "PersistentVolumeClaim" "" "" $volsync_label).items }}

                {{- if eq $pvc.status.phase "Bound" }}
                  {{- /* Use the hub-pvc-backup-pvcns-pvcname config instead of the default hub-pvc-backup map, if such map exists under the $ns */ -}}
                  {{- $pvc_config_name := ( (cat $volsync_map "-" $pvc.metadata.namespace "-" $pvc.metadata.name ) | replace " " "" ) }}

                  {{- $pvc_config_info_name := ( (cat $volsync_map "-" $pvc.metadata.name ) | replace " " "" ) }}

                  - complianceType: musthave
                    objectDefinition:
                      apiVersion: v1
                      kind: ConfigMap
                      metadata:
                        name: {{ $pvc_config_info_name }}
                        namespace: {{ $pvc.metadata.namespace }}
                        labels:
                          cluster.open-cluster-management.io/backup: cluster-activation
                          cluster.open-cluster-management.io/backup-pvc: {{ $pvc.metadata.name }}
                      data:
                        {{- if not ( eq  $pvc.spec.storageClassName "") }}
                        storageClassName: {{ $pvc.spec.storageClassName }}
                        {{- end }}
                        {{- if not ( eq  $pvc.spec.resources.requests.storage "") }}
                        capacity: {{ $pvc.spec.resources.requests.storage }}
                        {{- end }}                        
                        {{- if not (empty $pvc.spec.accessModes ) }}
                          {{ $am_val := ""}}
                          {{- range $av := $pvc.spec.accessModes }}
                             {{ $am_val =  cat $am_val $av }}
                          {{- end }}
                        accessModes: {{ $am_val }}
                        {{- end }}                        

                  {{ if eq ( lookup "v1" "ConfigMap" $ns $pvc_config_name ).metadata.name  $pvc_config_name }}   
                    {{ $volsync_map = $pvc_config_name }}
                  {{- end }}   

                  {{- $volsync_pvcs_str = ( (cat $volsync_pvcs_str "##" $pvc.metadata.namespace "#" $pvc.metadata.name ) | replace " " "" ) }}
                  {{- $common_restic_repo := ( lookup "v1" "Secret" $ns $volsync_secret ).data.RESTIC_REPOSITORY | base64dec }}
                  {{- $secretName := ( (cat $pvc.metadata.name "-"  $restic_secret_suffix ) | replace " " "" ) }}                 
                  - complianceType: musthave
                    objectDefinition:
                      apiVersion: v1
                      kind: Secret
                      metadata:
                        name: '{{ $secretName }}'
                        namespace: {{ $pvc.metadata.namespace }}
                      data:
                {{- range $key, $value := ( lookup "v1" "Secret" $ns $volsync_secret ).data }}
                    {{- if not (eq $key "RESTIC_REPOSITORY")}}
                        {{ $key }}: {{ $value }}
                    {{- end }}    
                {{- end }}
                        RESTIC_REPOSITORY: {{ ( ( (cat $common_restic_repo "/" $pvc.metadata.namespace "-" $pvc.metadata.name ) | replace " " "" ) | base64enc ) }}                      
                      type: Opaque
                      
                  - complianceType: mustonlyhave
                    objectDefinition:
                      kind: ReplicationSource
                      apiVersion: volsync.backube/v1alpha1
                      metadata:
                        name: {{ $pvc.metadata.name }}
                        namespace: {{ $pvc.metadata.namespace }}
                        labels:
                          {{ $volsync_label }}: acm
                      spec:
                        restic:
                          {{ $cacheCapacity := trimAll " " (fromConfigMap $ns $volsync_map "cacheCapacity") }}
                          {{- if not (eq $cacheCapacity "" ) }}
                          cacheCapacity: '{{ $cacheCapacity }}'
                          {{- end }}
                          copyMethod: Snapshot
                          {{ $pruneIntervalDays := trimAll " " (fromConfigMap $ns $volsync_map "pruneIntervalDays") }}
                          {{- if not (eq $pruneIntervalDays "" ) }}
                          pruneIntervalDays: '{{ $pruneIntervalDays | toInt }}'
                          {{- end }}
                          repository: '{{ $secretName }}'
                          {{ $retain_daily := trimAll " " (fromConfigMap $ns $volsync_map "retain_daily") }}
                          {{ $retain_hourly := trimAll " " (fromConfigMap $ns $volsync_map "retain_hourly") }}
                          {{ $retain_weekly := trimAll " " (fromConfigMap $ns $volsync_map "retain_weekly") }}
                          {{ $retain_monthly := trimAll " " (fromConfigMap $ns $volsync_map "retain_monthly") }}
                          {{ $retain_yearly := trimAll " " (fromConfigMap $ns $volsync_map "retain_yearly") }}
                          {{ $retain_within := trimAll " " (fromConfigMap $ns $volsync_map "retain_within") }}
                          {{ $retain_last := trimAll " " (fromConfigMap $ns $volsync_map "retain_last") }}
                          {{- /* if any of the retain options are set, create the retain section */ -}}
                          {{- if or (not (eq $retain_within "" )) (not (eq $retain_last "" ))  (not (eq $retain_daily "" )) (not (eq $retain_hourly "" )) (not (eq $retain_weekly "" )) (not (eq $retain_monthly "" )) (not (eq $retain_yearly "" )) }}
                          retain:
                          {{- end }}
                          {{- if not (eq $retain_daily "" ) }}
                            daily: '{{ $retain_daily | toInt }}'
                          {{- end }}
                          {{- if not (eq $retain_hourly "" ) }}
                            hourly: '{{ $retain_hourly | toInt }}'
                          {{- end }}
                          {{- if not (eq $retain_weekly "" ) }}
                            weekly: '{{ $retain_weekly | toInt }}'
                          {{- end }}
                          {{- if not (eq $retain_monthly "" ) }}
                            monthly: '{{ $retain_monthly | toInt }}'
                          {{- end }}
                          {{- if not (eq $retain_yearly "" ) }}
                            yearly: '{{ $retain_yearly | toInt }}'
                          {{- end }}
                          {{- if not (eq $retain_within "" ) }}
                            within: '{{ $retain_within }}'
                          {{- end }}
                          {{- if not (eq $retain_last "" ) }}
                            last: '{{ $retain_last }}'
                          {{- end }}
                          {{ $customCA_secretName := trimAll " " (fromConfigMap $ns $volsync_map "customCA_secretName") }}
                          {{ $customCA_configMapName := trimAll " " (fromConfigMap $ns $volsync_map "customCA_configMapName") }}
                          {{ $customCA_key := trimAll " " (fromConfigMap $ns $volsync_map "customCA_key") }}
                          {{- /* if any of the customCA options are set, create the customCA section */ -}}
                          {{- if or (not (eq $customCA_secretName "" )) (not (eq $customCA_configMapName "" )) (not (eq $customCA_key "" )) }}
                          customCA:
                          {{- end }}
                          {{- if not (eq $customCA_key "" ) }}
                            key: '{{ $customCA_key }}'
                          {{- end }}
                          {{- if not (eq $customCA_secretName "" ) }}
                            secretName: '{{ $customCA_secretName }}'
                          {{- end }}
                          {{- if not (eq $customCA_configMapName "" ) }}
                            configMapName: '{{ $customCA_configMapName }}'
                          {{- end }}
                          {{ $volumeSnapshotClassName := trimAll " " (fromConfigMap $ns $volsync_map "volumeSnapshotClassName") }}
                          {{- if not (eq $volumeSnapshotClassName "" ) }}
                          volumeSnapshotClassName: '{{ $volumeSnapshotClassName }}'
                          {{- end }}
                          {{ $storageClassName := trimAll " " (fromConfigMap $ns $volsync_map "storageClassName") }}
                          {{- if not (eq $storageClassName "" ) }}
                          storageClassName: '{{ $storageClassName }}'
                          {{- end }}
                          {{ $cacheStorageClassName := trimAll " " (fromConfigMap $ns $volsync_map "cacheStorageClassName") }}
                          {{- if not (eq $cacheStorageClassName "" ) }}
                          cacheStorageClassName: '{{ $cacheStorageClassName }}'
                          {{- end }}
                          {{ $capacity := trimAll " " (fromConfigMap $ns $volsync_map "capacity") }}
                          {{- if not (eq $capacity "" ) }}
                          capacity: '{{ $capacity }}'
                          {{- end }}
                          {{ $accessModes := trimAll " " (fromConfigMap $ns $volsync_map "accessModes") }}
                          {{- if not (eq $accessModes "" ) }}
                          accessModes: 
                            - '{{ $accessModes }}'
                          {{- end }}
                          {{ $cacheAccessModes := trimAll " " (fromConfigMap $ns $volsync_map "cacheAccessModes") }}
                          {{- if not (eq $cacheAccessModes "" ) }}
                          cacheAccessModes: 
                            - '{{ $cacheAccessModes }}'
                          {{- end }}
                        sourcePVC: {{ $pvc.metadata.name }}
                        trigger:
                          schedule: '{{ fromConfigMap $ns $volsync_map "trigger_schedule" }}'
                {{- end }}        
              {{- end }}
                 {{ if not (eq $volsync_pvcs_str "") }}
                  - complianceType: musthave
                    objectDefinition:
                      apiVersion: v1
                      kind: ConfigMap
                      metadata:
                        name: {{ $volsync_pvcs }}
                        namespace: {{ $ns }}
                        labels:
                          cluster.open-cluster-management.io/backup: cluster-activation
                          app: {{ $volsync_pvcs }}
                      data:
                        pvcs: {{ trimAll "##" $volsync_pvcs_str }}
                  {{- end }}      
            {{- else }}
              {{- range $pvc := (lookup "v1" "PersistentVolumeClaim" "" "" $volsync_label).items }}  
                  - complianceType: mustnothave
                    objectDefinition:
                      kind: ReplicationSource
                      apiVersion: volsync.backube/v1alpha1
                      metadata:
                        name: {{ $pvc.metadata.name }}
                        namespace: {{ $pvc.metadata.namespace }}
                        labels:
                          {{ $volsync_label }}: acm
                      spec:
                        sourcePVC: {{ $pvc.metadata.name }}
              {{- end }}
            {{- end }}
          remediationAction: enforce
          severity: high 
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: check-hub-source-replication-success 
        spec:
          object-templates-raw: |
            {{- $volsync_label := "cluster.open-cluster-management.io/backup-hub-pvc" }}
            {{- $ns := "open-cluster-management-backup" }} 
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (resources)"}}
            {{- $velero_api := "velero.io/v1" }}
            {{- $kind_schedule := "Schedule" }}
            {{- $volsync_backup_cond := gt (len ( lookup $velero_api $kind_schedule $ns "" $schedule_label).items ) 0  }}

            {{- /* The volsync replication-source should be successful */ -}}
            {{- range $pvc := (lookup "v1" "PersistentVolumeClaim" "" "" $volsync_label).items }}
              {{ if $volsync_backup_cond }}
              - complianceType: musthave
                objectDefinition:
                  apiVersion: volsync.backube/v1alpha1
                  kind: ReplicationSource
                  metadata:
                    namespace: {{ $pvc.metadata.namespace }}
                  status:
                    latestMoverStatus:
                      result: Successful       
              {{- end }}  
            {{- end }}
          remediationAction: inform
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: check-hub-source-replication-errors 
        spec:
          object-templates-raw: |
            {{- $volsync_label := "cluster.open-cluster-management.io/backup-hub-pvc" }}
            {{- $ns := "open-cluster-management-backup" }} 
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (resources)"}}
            {{- $velero_api := "velero.io/v1" }}
            {{- $kind_schedule := "Schedule" }}
            {{- $volsync_backup_cond := gt (len ( lookup $velero_api $kind_schedule $ns "" $schedule_label).items ) 0  }}

            {{- /* The volsync replication-source should not be failed */ -}}
            {{- range $pvc := (lookup "v1" "PersistentVolumeClaim" "" "" $volsync_label).items }}
              {{ if $volsync_backup_cond }}      
              - complianceType: mustnothave
                objectDefinition:
                  apiVersion: volsync.backube/v1alpha1
                  kind: ReplicationSource
                  metadata:
                    namespace: {{ $pvc.metadata.namespace }}
                  status:
                    latestMoverStatus:
                      result: Failed
              {{- end }}  
            {{- end }}
          remediationAction: inform
          severity: high
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: check-hub-pvc-filesystem 
        spec:
          object-templates-raw: |
            {{- $volsync_label := "cluster.open-cluster-management.io/backup-hub-pvc" }}
            {{- $ns := "open-cluster-management-backup" }} 
            {{- $schedule_label := "cluster.open-cluster-management.io/backup-schedule-type, cluster.open-cluster-management.io/backup-schedule-type in (resources)"}}
            {{- $velero_api := "velero.io/v1" }}
            {{- $kind_schedule := "Schedule" }}
            {{- $volsync_backup_cond := gt (len ( lookup $velero_api $kind_schedule $ns "" $schedule_label).items ) 0  }}

            {{- /* The PVC with a volsync_label should only use volumeMode: Filesystem */ -}}
            {{- range $pvc := (lookup "v1" "PersistentVolumeClaim" "" "" $volsync_label).items }}
              {{ if $volsync_backup_cond }}      
              - complianceType: musthave
                objectDefinition:
                  apiVersion: v1
                  kind: PersistentVolumeClaim
                  metadata:
                    namespace: {{ $pvc.metadata.namespace }}
                    name: {{ $pvc.metadata.name }}
                  spec:
                    volumeMode: Filesystem
              {{- end }}  
            {{- end }}
          remediationAction: inform
          severity: high